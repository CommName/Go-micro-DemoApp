// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: AirConditioner.proto

package iots_temperature_srv_AirConditioner

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AirConditioner service

type AirConditionerService interface {
	SetDeviceStatus(ctx context.Context, in *DeviceStatus, opts ...client.CallOption) (*Empty, error)
	GetDeviceStatus(ctx context.Context, in *Empty, opts ...client.CallOption) (*DeviceStatus, error)
}

type airConditionerService struct {
	c    client.Client
	name string
}

func NewAirConditionerService(name string, c client.Client) AirConditionerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iots.temperature.srv.AirConditioner"
	}
	return &airConditionerService{
		c:    c,
		name: name,
	}
}

func (c *airConditionerService) SetDeviceStatus(ctx context.Context, in *DeviceStatus, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "AirConditioner.SetDeviceStatus", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airConditionerService) GetDeviceStatus(ctx context.Context, in *Empty, opts ...client.CallOption) (*DeviceStatus, error) {
	req := c.c.NewRequest(c.name, "AirConditioner.GetDeviceStatus", in)
	out := new(DeviceStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AirConditioner service

type AirConditionerHandler interface {
	SetDeviceStatus(context.Context, *DeviceStatus, *Empty) error
	GetDeviceStatus(context.Context, *Empty, *DeviceStatus) error
}

func RegisterAirConditionerHandler(s server.Server, hdlr AirConditionerHandler, opts ...server.HandlerOption) error {
	type airConditioner interface {
		SetDeviceStatus(ctx context.Context, in *DeviceStatus, out *Empty) error
		GetDeviceStatus(ctx context.Context, in *Empty, out *DeviceStatus) error
	}
	type AirConditioner struct {
		airConditioner
	}
	h := &airConditionerHandler{hdlr}
	return s.Handle(s.NewHandler(&AirConditioner{h}, opts...))
}

type airConditionerHandler struct {
	AirConditionerHandler
}

func (h *airConditionerHandler) SetDeviceStatus(ctx context.Context, in *DeviceStatus, out *Empty) error {
	return h.AirConditionerHandler.SetDeviceStatus(ctx, in, out)
}

func (h *airConditionerHandler) GetDeviceStatus(ctx context.Context, in *Empty, out *DeviceStatus) error {
	return h.AirConditionerHandler.GetDeviceStatus(ctx, in, out)
}
