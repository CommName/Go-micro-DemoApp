// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: TemperatureControlSystem.proto

package iots_temperature_srv_TemperatureControlSystem

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TemperatureControlSystem service

type TemperatureControlSystemService interface {
	GetTemperature(ctx context.Context, in *Room, opts ...client.CallOption) (*RoomTemperatrue, error)
	SetDesirableTemperature(ctx context.Context, in *RoomTemperatrue, opts ...client.CallOption) (*Empty, error)
	CreateNewRoom(ctx context.Context, in *Room, opts ...client.CallOption) (*Empty, error)
	SetUpAirConditioner(ctx context.Context, in *AirConditioner, opts ...client.CallOption) (*Empty, error)
	DeleteRoom(ctx context.Context, in *Room, opts ...client.CallOption) (*Empty, error)
}

type temperatureControlSystemService struct {
	c    client.Client
	name string
}

func NewTemperatureControlSystemService(name string, c client.Client) TemperatureControlSystemService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iots.temperature.srv.TemperatureControlSystem"
	}
	return &temperatureControlSystemService{
		c:    c,
		name: name,
	}
}

func (c *temperatureControlSystemService) GetTemperature(ctx context.Context, in *Room, opts ...client.CallOption) (*RoomTemperatrue, error) {
	req := c.c.NewRequest(c.name, "TemperatureControlSystem.GetTemperature", in)
	out := new(RoomTemperatrue)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureControlSystemService) SetDesirableTemperature(ctx context.Context, in *RoomTemperatrue, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "TemperatureControlSystem.SetDesirableTemperature", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureControlSystemService) CreateNewRoom(ctx context.Context, in *Room, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "TemperatureControlSystem.CreateNewRoom", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureControlSystemService) SetUpAirConditioner(ctx context.Context, in *AirConditioner, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "TemperatureControlSystem.SetUpAirConditioner", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureControlSystemService) DeleteRoom(ctx context.Context, in *Room, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "TemperatureControlSystem.DeleteRoom", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TemperatureControlSystem service

type TemperatureControlSystemHandler interface {
	GetTemperature(context.Context, *Room, *RoomTemperatrue) error
	SetDesirableTemperature(context.Context, *RoomTemperatrue, *Empty) error
	CreateNewRoom(context.Context, *Room, *Empty) error
	SetUpAirConditioner(context.Context, *AirConditioner, *Empty) error
	DeleteRoom(context.Context, *Room, *Empty) error
}

func RegisterTemperatureControlSystemHandler(s server.Server, hdlr TemperatureControlSystemHandler, opts ...server.HandlerOption) error {
	type temperatureControlSystem interface {
		GetTemperature(ctx context.Context, in *Room, out *RoomTemperatrue) error
		SetDesirableTemperature(ctx context.Context, in *RoomTemperatrue, out *Empty) error
		CreateNewRoom(ctx context.Context, in *Room, out *Empty) error
		SetUpAirConditioner(ctx context.Context, in *AirConditioner, out *Empty) error
		DeleteRoom(ctx context.Context, in *Room, out *Empty) error
	}
	type TemperatureControlSystem struct {
		temperatureControlSystem
	}
	h := &temperatureControlSystemHandler{hdlr}
	return s.Handle(s.NewHandler(&TemperatureControlSystem{h}, opts...))
}

type temperatureControlSystemHandler struct {
	TemperatureControlSystemHandler
}

func (h *temperatureControlSystemHandler) GetTemperature(ctx context.Context, in *Room, out *RoomTemperatrue) error {
	return h.TemperatureControlSystemHandler.GetTemperature(ctx, in, out)
}

func (h *temperatureControlSystemHandler) SetDesirableTemperature(ctx context.Context, in *RoomTemperatrue, out *Empty) error {
	return h.TemperatureControlSystemHandler.SetDesirableTemperature(ctx, in, out)
}

func (h *temperatureControlSystemHandler) CreateNewRoom(ctx context.Context, in *Room, out *Empty) error {
	return h.TemperatureControlSystemHandler.CreateNewRoom(ctx, in, out)
}

func (h *temperatureControlSystemHandler) SetUpAirConditioner(ctx context.Context, in *AirConditioner, out *Empty) error {
	return h.TemperatureControlSystemHandler.SetUpAirConditioner(ctx, in, out)
}

func (h *temperatureControlSystemHandler) DeleteRoom(ctx context.Context, in *Room, out *Empty) error {
	return h.TemperatureControlSystemHandler.DeleteRoom(ctx, in, out)
}
